Given an array arr[] of n positive integers. Push all the zeros of the given array to the right end of the array
while maintaining the order of non-zero elements. Do the mentioned change in the array in-place.

Examples:
Input: n = 5, arr[] = {3, 5, 0, 0, 4}
Output: 3 5 4 0 0
Explanation: The non-zero elements preserve their order while the 0 elements are moved to the right.
Input: n = 4, arr[] = {0, 0, 0, 4}
Output: 4 0 0 0
Explanation: 4 is the only non-zero element and it gets moved to the left.
Input: n = 3, arr[] = {10, 2, 4}
Output: 10 2 4
Explanation: Since there are no 0s, the array does not change.
 

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

code=
class Solution:
    def pushZerosToEnd(self, arr, n):
        # Pointer to track the position for the next non-zero element
        last_non_zero_found_at = 0
        # Move all non-zero elements to the front of the array
        for i in range(n):
            if arr[i] != 0:
                arr[last_non_zero_found_at], arr[i] = arr[i], arr[last_non_zero_found_at]
                last_non_zero_found_at += 1
        
        return arr


